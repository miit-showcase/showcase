@file:Suppress("warnings")
/*
 * This file is generated by jOOQ.
 */
package jooq.keys


import jooq.tables.Customer
import jooq.tables.Project
import jooq.tables.ProjectKeywords
import jooq.tables.ProjectProgress
import jooq.tables.ProjectRequest
import jooq.tables.ProjectScope
import jooq.tables.Student
import jooq.tables.Teacher
import jooq.tables.Team
import jooq.tables.records.CustomerRecord
import jooq.tables.records.ProjectKeywordsRecord
import jooq.tables.records.ProjectProgressRecord
import jooq.tables.records.ProjectRecord
import jooq.tables.records.ProjectRequestRecord
import jooq.tables.records.ProjectScopeRecord
import jooq.tables.records.StudentRecord
import jooq.tables.records.TeacherRecord
import jooq.tables.records.TeamRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.QOM.ForeignKeyRule



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val CUSTOMER_PKEY: UniqueKey<CustomerRecord> = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("customer_pkey"), arrayOf(Customer.CUSTOMER.UUID), true)
val PROJECT_PKEY: UniqueKey<ProjectRecord> = Internal.createUniqueKey(Project.PROJECT, DSL.name("project_pkey"), arrayOf(Project.PROJECT.UUID), true)
val PROJECT_KEYWORDS_PKEY: UniqueKey<ProjectKeywordsRecord> = Internal.createUniqueKey(ProjectKeywords.PROJECT_KEYWORDS, DSL.name("project_keywords_pkey"), arrayOf(ProjectKeywords.PROJECT_KEYWORDS.ID), true)
val PROJECT_PROGRESS_PKEY: UniqueKey<ProjectProgressRecord> = Internal.createUniqueKey(ProjectProgress.PROJECT_PROGRESS, DSL.name("project_progress_pkey"), arrayOf(ProjectProgress.PROJECT_PROGRESS.UUID), true)
val PROJECT_REQUEST_PKEY: UniqueKey<ProjectRequestRecord> = Internal.createUniqueKey(ProjectRequest.PROJECT_REQUEST, DSL.name("project_request_pkey"), arrayOf(ProjectRequest.PROJECT_REQUEST.UUID), true)
val PROJECT_SCOPE_PKEY: UniqueKey<ProjectScopeRecord> = Internal.createUniqueKey(ProjectScope.PROJECT_SCOPE, DSL.name("project_scope_pkey"), arrayOf(ProjectScope.PROJECT_SCOPE.ID), true)
val STUDENT_PKEY: UniqueKey<StudentRecord> = Internal.createUniqueKey(Student.STUDENT, DSL.name("student_pkey"), arrayOf(Student.STUDENT.UUID), true)
val TEACHER_PKEY: UniqueKey<TeacherRecord> = Internal.createUniqueKey(Teacher.TEACHER, DSL.name("teacher_pkey"), arrayOf(Teacher.TEACHER.UUID), true)
val TEAM_PKEY: UniqueKey<TeamRecord> = Internal.createUniqueKey(Team.TEAM, DSL.name("team_pkey"), arrayOf(Team.TEAM.UUID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val PROJECT_KEYWORDS__PROJECT_KEYWORDS_PROJECT_ID_FKEY: ForeignKey<ProjectKeywordsRecord, ProjectRecord> = Internal.createForeignKey(ProjectKeywords.PROJECT_KEYWORDS, DSL.name("project_keywords_project_id_fkey"), arrayOf(ProjectKeywords.PROJECT_KEYWORDS.PROJECT_ID), jooq.keys.PROJECT_PKEY, arrayOf(Project.PROJECT.UUID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PROJECT_PROGRESS__PROJECT_PROGRESS_PROJECT_ID_FKEY: ForeignKey<ProjectProgressRecord, ProjectRecord> = Internal.createForeignKey(ProjectProgress.PROJECT_PROGRESS, DSL.name("project_progress_project_id_fkey"), arrayOf(ProjectProgress.PROJECT_PROGRESS.PROJECT_ID), jooq.keys.PROJECT_PKEY, arrayOf(Project.PROJECT.UUID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PROJECT_PROGRESS__PROJECT_PROGRESS_TEAM_ID_FKEY: ForeignKey<ProjectProgressRecord, TeamRecord> = Internal.createForeignKey(ProjectProgress.PROJECT_PROGRESS, DSL.name("project_progress_team_id_fkey"), arrayOf(ProjectProgress.PROJECT_PROGRESS.TEAM_ID), jooq.keys.TEAM_PKEY, arrayOf(Team.TEAM.UUID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PROJECT_REQUEST__PROJECT_REQUEST_PROJECT_ID_FKEY: ForeignKey<ProjectRequestRecord, ProjectRecord> = Internal.createForeignKey(ProjectRequest.PROJECT_REQUEST, DSL.name("project_request_project_id_fkey"), arrayOf(ProjectRequest.PROJECT_REQUEST.PROJECT_ID), jooq.keys.PROJECT_PKEY, arrayOf(Project.PROJECT.UUID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PROJECT_REQUEST__PROJECT_REQUEST_TEAM_ID_FKEY: ForeignKey<ProjectRequestRecord, TeamRecord> = Internal.createForeignKey(ProjectRequest.PROJECT_REQUEST, DSL.name("project_request_team_id_fkey"), arrayOf(ProjectRequest.PROJECT_REQUEST.TEAM_ID), jooq.keys.TEAM_PKEY, arrayOf(Team.TEAM.UUID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PROJECT_SCOPE__PROJECT_SCOPE_PROJECT_ID_FKEY: ForeignKey<ProjectScopeRecord, ProjectRecord> = Internal.createForeignKey(ProjectScope.PROJECT_SCOPE, DSL.name("project_scope_project_id_fkey"), arrayOf(ProjectScope.PROJECT_SCOPE.PROJECT_ID), jooq.keys.PROJECT_PKEY, arrayOf(Project.PROJECT.UUID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val STUDENT__STUDENT_TEAM_ID_FKEY: ForeignKey<StudentRecord, TeamRecord> = Internal.createForeignKey(Student.STUDENT, DSL.name("student_team_id_fkey"), arrayOf(Student.STUDENT.TEAM_ID), jooq.keys.TEAM_PKEY, arrayOf(Team.TEAM.UUID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val TEAM__TEAM_TEACHER_FKEY: ForeignKey<TeamRecord, TeacherRecord> = Internal.createForeignKey(Team.TEAM, DSL.name("team_teacher_fkey"), arrayOf(Team.TEAM.TEACHER), jooq.keys.TEACHER_PKEY, arrayOf(Teacher.TEACHER.UUID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
