/*
 * This file is generated by jOOQ.
 */
package jooq.tables


import java.time.LocalDate

import jooq.Public
import jooq.keys.PROJECT_KEYWORDS__PROJECT_KEYWORDS_PROJECT_ID_FKEY
import jooq.keys.PROJECT_PKEY
import jooq.keys.PROJECT_PROGRESS__PROJECT_PROGRESS_PROJECT_ID_FKEY
import jooq.keys.PROJECT_REQUEST__PROJECT_REQUEST_PROJECT_ID_FKEY
import jooq.keys.PROJECT_SCOPE__PROJECT_SCOPE_PROJECT_ID_FKEY
import jooq.tables.ProjectKeywords.ProjectKeywordsPath
import jooq.tables.ProjectProgress.ProjectProgressPath
import jooq.tables.ProjectRequest.ProjectRequestPath
import jooq.tables.ProjectScope.ProjectScopePath
import jooq.tables.records.ProjectRecord

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Project(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ProjectRecord>?,
    parentPath: InverseForeignKey<out Record, ProjectRecord>?,
    aliased: Table<ProjectRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ProjectRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.project</code>
         */
        val PROJECT: Project = Project()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ProjectRecord> = ProjectRecord::class.java

    /**
     * The column <code>public.project.uuid</code>.
     */
    val UUID: TableField<ProjectRecord, String?> = createField(DSL.name("uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.project.revision</code>.
     */
    val REVISION: TableField<ProjectRecord, Int?> = createField(DSL.name("revision"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.project.customer_id</code>.
     */
    val CUSTOMER_ID: TableField<ProjectRecord, String?> = createField(DSL.name("customer_id"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.project.title</code>.
     */
    val TITLE: TableField<ProjectRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.project.goal</code>.
     */
    val GOAL: TableField<ProjectRecord, String?> = createField(DSL.name("goal"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.project.project_barrier</code>.
     */
    val PROJECT_BARRIER: TableField<ProjectRecord, String?> = createField(DSL.name("project_barrier"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.project.alternative_solutions</code>.
     */
    val ALTERNATIVE_SOLUTIONS: TableField<ProjectRecord, String?> = createField(DSL.name("alternative_solutions"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.project.project_type</code>.
     */
    val PROJECT_TYPE: TableField<ProjectRecord, String?> = createField(DSL.name("project_type"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.project.institute</code>.
     */
    val INSTITUTE: TableField<ProjectRecord, String?> = createField(DSL.name("institute"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.project.department</code>.
     */
    val DEPARTMENT: TableField<ProjectRecord, String?> = createField(DSL.name("department"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.project.added_by</code>.
     */
    val ADDED_BY: TableField<ProjectRecord, String?> = createField(DSL.name("added_by"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.project.added_date</code>.
     */
    val ADDED_DATE: TableField<ProjectRecord, LocalDate?> = createField(DSL.name("added_date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.project.updated_date</code>.
     */
    val UPDATED_DATE: TableField<ProjectRecord, LocalDate?> = createField(DSL.name("updated_date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.project.deleted_date</code>.
     */
    val DELETED_DATE: TableField<ProjectRecord, LocalDate?> = createField(DSL.name("deleted_date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.project.project_status</code>.
     */
    val PROJECT_STATUS: TableField<ProjectRecord, String?> = createField(DSL.name("project_status"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.project.idempotency_token</code>.
     */
    val IDEMPOTENCY_TOKEN: TableField<ProjectRecord, String?> = createField(DSL.name("idempotency_token"), SQLDataType.VARCHAR(255), this, "")

    private constructor(alias: Name, aliased: Table<ProjectRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ProjectRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ProjectRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.project</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.project</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.project</code> table reference
     */
    constructor(): this(DSL.name("project"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ProjectRecord>?, parentPath: InverseForeignKey<out Record, ProjectRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, PROJECT, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ProjectPath : Project, Path<ProjectRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ProjectRecord>?, parentPath: InverseForeignKey<out Record, ProjectRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<ProjectRecord>): super(alias, aliased)
        override fun `as`(alias: String): ProjectPath = ProjectPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ProjectPath = ProjectPath(alias, this)
        override fun `as`(alias: Table<*>): ProjectPath = ProjectPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<ProjectRecord> = PROJECT_PKEY

    private lateinit var _projectKeywords: ProjectKeywordsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_keywords</code> table
     */
    fun projectKeywords(): ProjectKeywordsPath {
        if (!this::_projectKeywords.isInitialized)
            _projectKeywords = ProjectKeywordsPath(this, null, PROJECT_KEYWORDS__PROJECT_KEYWORDS_PROJECT_ID_FKEY.inverseKey)

        return _projectKeywords;
    }

    val projectKeywords: ProjectKeywordsPath
        get(): ProjectKeywordsPath = projectKeywords()

    private lateinit var _projectProgress: ProjectProgressPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_progress</code> table
     */
    fun projectProgress(): ProjectProgressPath {
        if (!this::_projectProgress.isInitialized)
            _projectProgress = ProjectProgressPath(this, null, PROJECT_PROGRESS__PROJECT_PROGRESS_PROJECT_ID_FKEY.inverseKey)

        return _projectProgress;
    }

    val projectProgress: ProjectProgressPath
        get(): ProjectProgressPath = projectProgress()

    private lateinit var _projectRequest: ProjectRequestPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_request</code> table
     */
    fun projectRequest(): ProjectRequestPath {
        if (!this::_projectRequest.isInitialized)
            _projectRequest = ProjectRequestPath(this, null, PROJECT_REQUEST__PROJECT_REQUEST_PROJECT_ID_FKEY.inverseKey)

        return _projectRequest;
    }

    val projectRequest: ProjectRequestPath
        get(): ProjectRequestPath = projectRequest()

    private lateinit var _projectScope: ProjectScopePath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_scope</code> table
     */
    fun projectScope(): ProjectScopePath {
        if (!this::_projectScope.isInitialized)
            _projectScope = ProjectScopePath(this, null, PROJECT_SCOPE__PROJECT_SCOPE_PROJECT_ID_FKEY.inverseKey)

        return _projectScope;
    }

    val projectScope: ProjectScopePath
        get(): ProjectScopePath = projectScope()
    override fun `as`(alias: String): Project = Project(DSL.name(alias), this)
    override fun `as`(alias: Name): Project = Project(alias, this)
    override fun `as`(alias: Table<*>): Project = Project(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Project = Project(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Project = Project(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Project = Project(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Project = Project(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Project = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Project = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Project = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Project = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Project = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Project = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Project = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Project = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Project = where(DSL.notExists(select))
}
