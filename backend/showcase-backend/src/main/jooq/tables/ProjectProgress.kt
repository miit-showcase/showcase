/*
 * This file is generated by jOOQ.
 */
package jooq.tables


import java.time.LocalDate

import jooq.Public
import jooq.keys.PROJECT_PROGRESS_PKEY
import jooq.keys.PROJECT_PROGRESS__PROJECT_PROGRESS_PROJECT_ID_FKEY
import jooq.keys.PROJECT_PROGRESS__PROJECT_PROGRESS_TEAM_ID_FKEY
import jooq.tables.Project.ProjectPath
import jooq.tables.Team.TeamPath
import jooq.tables.records.ProjectProgressRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ProjectProgress(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ProjectProgressRecord>?,
    parentPath: InverseForeignKey<out Record, ProjectProgressRecord>?,
    aliased: Table<ProjectProgressRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ProjectProgressRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.project_progress</code>
         */
        val PROJECT_PROGRESS: ProjectProgress = ProjectProgress()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ProjectProgressRecord> = ProjectProgressRecord::class.java

    /**
     * The column <code>public.project_progress.uuid</code>.
     */
    val UUID: TableField<ProjectProgressRecord, String?> = createField(DSL.name("uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.project_progress.team_id</code>.
     */
    val TEAM_ID: TableField<ProjectProgressRecord, String?> = createField(DSL.name("team_id"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.project_progress.project_id</code>.
     */
    val PROJECT_ID: TableField<ProjectProgressRecord, String?> = createField(DSL.name("project_id"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.project_progress.revision</code>.
     */
    val REVISION: TableField<ProjectProgressRecord, Int?> = createField(DSL.name("revision"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.project_progress.status</code>.
     */
    val STATUS: TableField<ProjectProgressRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.project_progress.expiry_date</code>.
     */
    val EXPIRY_DATE: TableField<ProjectProgressRecord, LocalDate?> = createField(DSL.name("expiry_date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.project_progress.state</code>.
     */
    val STATE: TableField<ProjectProgressRecord, String?> = createField(DSL.name("state"), SQLDataType.VARCHAR(255), this, "")

    private constructor(alias: Name, aliased: Table<ProjectProgressRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ProjectProgressRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ProjectProgressRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.project_progress</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.project_progress</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.project_progress</code> table reference
     */
    constructor(): this(DSL.name("project_progress"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ProjectProgressRecord>?, parentPath: InverseForeignKey<out Record, ProjectProgressRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, PROJECT_PROGRESS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ProjectProgressPath : ProjectProgress, Path<ProjectProgressRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ProjectProgressRecord>?, parentPath: InverseForeignKey<out Record, ProjectProgressRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<ProjectProgressRecord>): super(alias, aliased)
        override fun `as`(alias: String): ProjectProgressPath = ProjectProgressPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ProjectProgressPath = ProjectProgressPath(alias, this)
        override fun `as`(alias: Table<*>): ProjectProgressPath = ProjectProgressPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<ProjectProgressRecord> = PROJECT_PROGRESS_PKEY
    override fun getReferences(): List<ForeignKey<ProjectProgressRecord, *>> = listOf(PROJECT_PROGRESS__PROJECT_PROGRESS_PROJECT_ID_FKEY, PROJECT_PROGRESS__PROJECT_PROGRESS_TEAM_ID_FKEY)

    /**
     * Get the implicit join path to the <code>public.project</code> table.
     */
    fun project(): ProjectPath = project
    val project: ProjectPath by lazy { ProjectPath(this, PROJECT_PROGRESS__PROJECT_PROGRESS_PROJECT_ID_FKEY, null) }

    /**
     * Get the implicit join path to the <code>public.team</code> table.
     */
    fun team(): TeamPath = team
    val team: TeamPath by lazy { TeamPath(this, PROJECT_PROGRESS__PROJECT_PROGRESS_TEAM_ID_FKEY, null) }
    override fun `as`(alias: String): ProjectProgress = ProjectProgress(DSL.name(alias), this)
    override fun `as`(alias: Name): ProjectProgress = ProjectProgress(alias, this)
    override fun `as`(alias: Table<*>): ProjectProgress = ProjectProgress(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ProjectProgress = ProjectProgress(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ProjectProgress = ProjectProgress(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ProjectProgress = ProjectProgress(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ProjectProgress = ProjectProgress(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ProjectProgress = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ProjectProgress = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ProjectProgress = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): ProjectProgress = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): ProjectProgress = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ProjectProgress = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ProjectProgress = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ProjectProgress = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ProjectProgress = where(DSL.notExists(select))
}
