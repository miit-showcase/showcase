/*
 * This file is generated by jOOQ.
 */
package jooq.tables


import jooq.Public
import jooq.keys.STUDENT_PKEY
import jooq.keys.STUDENT__STUDENT_TEAM_ID_FKEY
import jooq.tables.Team.TeamPath
import jooq.tables.records.StudentRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Student(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, StudentRecord>?,
    parentPath: InverseForeignKey<out Record, StudentRecord>?,
    aliased: Table<StudentRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<StudentRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.student</code>
         */
        val STUDENT: Student = Student()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<StudentRecord> = StudentRecord::class.java

    /**
     * The column <code>public.student.uuid</code>.
     */
    val UUID: TableField<StudentRecord, String?> = createField(DSL.name("uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.student.revision</code>.
     */
    val REVISION: TableField<StudentRecord, Int?> = createField(DSL.name("revision"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.student.idempotency_token</code>.
     */
    val IDEMPOTENCY_TOKEN: TableField<StudentRecord, String?> = createField(DSL.name("idempotency_token"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.student.project_teacher</code>.
     */
    val PROJECT_TEACHER: TableField<StudentRecord, String?> = createField(DSL.name("project_teacher"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.student.study_group</code>.
     */
    val STUDY_GROUP: TableField<StudentRecord, String?> = createField(DSL.name("study_group"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.student.first_name</code>.
     */
    val FIRST_NAME: TableField<StudentRecord, String?> = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.student.last_name</code>.
     */
    val LAST_NAME: TableField<StudentRecord, String?> = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.student.patronymic</code>.
     */
    val PATRONYMIC: TableField<StudentRecord, String?> = createField(DSL.name("patronymic"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.student.team_id</code>.
     */
    val TEAM_ID: TableField<StudentRecord, String?> = createField(DSL.name("team_id"), SQLDataType.VARCHAR(255), this, "")

    private constructor(alias: Name, aliased: Table<StudentRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<StudentRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<StudentRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.student</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.student</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.student</code> table reference
     */
    constructor(): this(DSL.name("student"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, StudentRecord>?, parentPath: InverseForeignKey<out Record, StudentRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, STUDENT, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class StudentPath : Student, Path<StudentRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, StudentRecord>?, parentPath: InverseForeignKey<out Record, StudentRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<StudentRecord>): super(alias, aliased)
        override fun `as`(alias: String): StudentPath = StudentPath(DSL.name(alias), this)
        override fun `as`(alias: Name): StudentPath = StudentPath(alias, this)
        override fun `as`(alias: Table<*>): StudentPath = StudentPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<StudentRecord> = STUDENT_PKEY
    override fun getReferences(): List<ForeignKey<StudentRecord, *>> = listOf(STUDENT__STUDENT_TEAM_ID_FKEY)

    /**
     * Get the implicit join path to the <code>public.team</code> table.
     */
    fun team(): TeamPath = team
    val team: TeamPath by lazy { TeamPath(this, STUDENT__STUDENT_TEAM_ID_FKEY, null) }
    override fun `as`(alias: String): Student = Student(DSL.name(alias), this)
    override fun `as`(alias: Name): Student = Student(alias, this)
    override fun `as`(alias: Table<*>): Student = Student(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Student = Student(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Student = Student(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Student = Student(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Student = Student(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Student = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Student = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Student = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Student = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Student = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Student = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Student = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Student = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Student = where(DSL.notExists(select))
}
