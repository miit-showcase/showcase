/*
 * This file is generated by jOOQ.
 */
package jooq.tables


import java.time.LocalDate

import jooq.Public
import jooq.keys.PROJECT_PROGRESS__PROJECT_PROGRESS_TEAM_ID_FKEY
import jooq.keys.PROJECT_REQUEST__PROJECT_REQUEST_TEAM_ID_FKEY
import jooq.keys.STUDENT__STUDENT_TEAM_ID_FKEY
import jooq.keys.TEAM_PKEY
import jooq.keys.TEAM__TEAM_TEACHER_FKEY
import jooq.tables.ProjectProgress.ProjectProgressPath
import jooq.tables.ProjectRequest.ProjectRequestPath
import jooq.tables.Student.StudentPath
import jooq.tables.Teacher.TeacherPath
import jooq.tables.records.TeamRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Team(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TeamRecord>?,
    parentPath: InverseForeignKey<out Record, TeamRecord>?,
    aliased: Table<TeamRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TeamRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.team</code>
         */
        val TEAM: Team = Team()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TeamRecord> = TeamRecord::class.java

    /**
     * The column <code>public.team.uuid</code>.
     */
    val UUID: TableField<TeamRecord, String?> = createField(DSL.name("uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.team.idempotency_token</code>.
     */
    val IDEMPOTENCY_TOKEN: TableField<TeamRecord, String?> = createField(DSL.name("idempotency_token"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.team.teacher</code>.
     */
    val TEACHER: TableField<TeamRecord, String?> = createField(DSL.name("teacher"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.team.organization_date</code>.
     */
    val ORGANIZATION_DATE: TableField<TeamRecord, LocalDate?> = createField(DSL.name("organization_date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.team.revision</code>.
     */
    val REVISION: TableField<TeamRecord, Int?> = createField(DSL.name("revision"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<TeamRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TeamRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TeamRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.team</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.team</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.team</code> table reference
     */
    constructor(): this(DSL.name("team"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TeamRecord>?, parentPath: InverseForeignKey<out Record, TeamRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, TEAM, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class TeamPath : Team, Path<TeamRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TeamRecord>?, parentPath: InverseForeignKey<out Record, TeamRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<TeamRecord>): super(alias, aliased)
        override fun `as`(alias: String): TeamPath = TeamPath(DSL.name(alias), this)
        override fun `as`(alias: Name): TeamPath = TeamPath(alias, this)
        override fun `as`(alias: Table<*>): TeamPath = TeamPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<TeamRecord> = TEAM_PKEY
    override fun getReferences(): List<ForeignKey<TeamRecord, *>> = listOf(TEAM__TEAM_TEACHER_FKEY)

    /**
     * Get the implicit join path to the <code>public.teacher</code> table.
     */
    fun teacher(): TeacherPath = teacher
    val teacher: TeacherPath by lazy { TeacherPath(this, TEAM__TEAM_TEACHER_FKEY, null) }

    private lateinit var _projectProgress: ProjectProgressPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_progress</code> table
     */
    fun projectProgress(): ProjectProgressPath {
        if (!this::_projectProgress.isInitialized)
            _projectProgress = ProjectProgressPath(this, null, PROJECT_PROGRESS__PROJECT_PROGRESS_TEAM_ID_FKEY.inverseKey)

        return _projectProgress;
    }

    val projectProgress: ProjectProgressPath
        get(): ProjectProgressPath = projectProgress()

    private lateinit var _projectRequest: ProjectRequestPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_request</code> table
     */
    fun projectRequest(): ProjectRequestPath {
        if (!this::_projectRequest.isInitialized)
            _projectRequest = ProjectRequestPath(this, null, PROJECT_REQUEST__PROJECT_REQUEST_TEAM_ID_FKEY.inverseKey)

        return _projectRequest;
    }

    val projectRequest: ProjectRequestPath
        get(): ProjectRequestPath = projectRequest()

    private lateinit var _student: StudentPath

    /**
     * Get the implicit to-many join path to the <code>public.student</code>
     * table
     */
    fun student(): StudentPath {
        if (!this::_student.isInitialized)
            _student = StudentPath(this, null, STUDENT__STUDENT_TEAM_ID_FKEY.inverseKey)

        return _student;
    }

    val student: StudentPath
        get(): StudentPath = student()
    override fun `as`(alias: String): Team = Team(DSL.name(alias), this)
    override fun `as`(alias: Name): Team = Team(alias, this)
    override fun `as`(alias: Table<*>): Team = Team(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Team = Team(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Team = Team(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Team = Team(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Team = Team(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Team = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Team = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Team = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Team = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Team = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Team = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Team = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Team = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Team = where(DSL.notExists(select))
}
