/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records


import java.time.LocalDate

import jooq.tables.ProjectProgress

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ProjectProgressRecord() : UpdatableRecordImpl<ProjectProgressRecord>(ProjectProgress.PROJECT_PROGRESS) {

    open var uuid: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var teamId: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var projectId: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var revision: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var status: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var expiryDate: LocalDate?
        set(value): Unit = set(5, value)
        get(): LocalDate? = get(5) as LocalDate?

    open var state: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    /**
     * Create a detached, initialised ProjectProgressRecord
     */
    constructor(uuid: String? = null, teamId: String? = null, projectId: String? = null, revision: Int? = null, status: String? = null, expiryDate: LocalDate? = null, state: String? = null): this() {
        this.uuid = uuid
        this.teamId = teamId
        this.projectId = projectId
        this.revision = revision
        this.status = status
        this.expiryDate = expiryDate
        this.state = state
        resetTouchedOnNotNull()
    }
}
