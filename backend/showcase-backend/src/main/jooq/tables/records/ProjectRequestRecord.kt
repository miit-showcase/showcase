/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records


import java.time.LocalDate

import jooq.tables.ProjectRequest

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ProjectRequestRecord() : UpdatableRecordImpl<ProjectRequestRecord>(ProjectRequest.PROJECT_REQUEST) {

    open var uuid: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var projectId: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var idempotencyToken: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var teamId: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var date: LocalDate?
        set(value): Unit = set(4, value)
        get(): LocalDate? = get(4) as LocalDate?

    open var context: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var requestStatus: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    /**
     * Create a detached, initialised ProjectRequestRecord
     */
    constructor(uuid: String? = null, projectId: String? = null, idempotencyToken: String? = null, teamId: String? = null, date: LocalDate? = null, context: String? = null, requestStatus: String? = null): this() {
        this.uuid = uuid
        this.projectId = projectId
        this.idempotencyToken = idempotencyToken
        this.teamId = teamId
        this.date = date
        this.context = context
        this.requestStatus = requestStatus
        resetTouchedOnNotNull()
    }
}
